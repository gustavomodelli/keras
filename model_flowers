library(tidyverse)
library(keras)


train_dir <- c('C:/Users/transplante.HCFMB/Documents/flowers/train')
test_dir <-  c('C:/Users/transplante.HCFMB/Documents/flowers/test')
validation_dir <-  c('C:/Users/transplante.HCFMB/Documents/flowers/validation')


test_datagen <- image_data_generator(rescale = 1/255)  
validation_datagen <- image_data_generator(rescale = 1/255)

##Few data we have to generate noise
train_datagen <- image_data_generator(
  rescale = 1/255, ##rescale
  rotation_range = 40,
  width_shift_range = 0.2,
  height_shift_range = 0.2,
  shear_range = 0.2,
  zoom_range = 0.2,
  horizontal_flip = TRUE,
  fill_mode = "nearest"
)

##Load Images
train_generator <- flow_images_from_directory(
  train_dir,
  train_datagen,
  classes = c('rose','tulip'), 
  target_size = c(150, 150),  
  batch_size = 20,
  class_mode = "binary" ##Binary Problem Others: "categorical", "binary", "sparse"
)

test_generator <- flow_images_from_directory(
  test_dir,
  test_datagen,
  classes = c('rose','tulip'), 
  target_size = c(150, 150),  
  batch_size = 20,
  class_mode = "binary" ##Binary Problem Others: "categorical", "binary", "sparse"
)


validation_generator <- flow_images_from_directory(
test_dir,
validation_datagen,
classes = c('rose','tulip'),
target_size = c(150, 150),
batch_size = 20,
class_mode = "binary"
)


##model keras
##Keras model 2d
model <- keras_model_sequential() %>%
  layer_conv_2d(filters = 32, kernel_size = c(3, 3), activation = "relu",
                input_shape = c(150, 150, 3)) %>%
  layer_max_pooling_2d(pool_size = c(2, 2)) %>%
  layer_conv_2d(filters = 64, kernel_size = c(3, 3), activation = "relu") %>%
  layer_max_pooling_2d(pool_size = c(2, 2)) %>%
  layer_conv_2d(filters = 128, kernel_size = c(3, 3), activation = "relu") %>%
  layer_max_pooling_2d(pool_size = c(2, 2)) %>%
  layer_conv_2d(filters = 128, kernel_size = c(3, 3), activation = "relu") %>%
  layer_max_pooling_2d(pool_size = c(2, 2)) %>%
  layer_flatten() %>%
  layer_dense(units = 512, activation = "relu") %>%
  layer_dense(units = 1, activation = "sigmoid")  ## sigmoid and 1 neuron by logistreg


##compilte
## Compile
model %>% compile(
  loss = "binary_crossentropy",  ##or "categorical_crossentropy" to categorical
  optimizer = optimizer_rmsprop(lr = 1e-4),
  metrics = c("acc")
)


## Fit
history <- model %>% fit_generator(
  train_generator,
  steps_per_epoch = 30,
  epochs = 30,
  validation_data = test_generator,  ##Alternative: validation_split = 0.2
  validation_steps = 30
)


evaluate_generator(model, validation_generator, steps = length(validation_generator) )


save_model_hdf5(model, filepath = 'C:/Users/transplante.HCFMB/Documents/modelrose')

